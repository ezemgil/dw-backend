CREATE TABLE genders (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL UNIQUE
);

CREATE TABLE categories (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    icon_url TEXT,
    words_amount INTEGER NOT NULL DEFAULT 0
);

CREATE TABLE word_types (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL UNIQUE
);

CREATE TABLE words (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    word TEXT NOT NULL,
    gender_id INTEGER REFERENCES genders(id) ON DELETE SET NULL,
    plural TEXT,
    notes TEXT,
    category_id INTEGER REFERENCES categories(id) ON DELETE SET NULL,
    type_id INTEGER NOT NULL REFERENCES word_types(id) ON DELETE RESTRICT,
    image_url TEXT,
    audio_url TEXT,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    cefr_level TEXT
);

CREATE TABLE staging_words (
    id SERIAL,
    word TEXT,
    gender TEXT,
    plural TEXT,
    word_type TEXT,
    hint TEXT,
    category TEXT,
    cefr_level TEXT,
    image_query TEXT,
    audio_query TEXT,
    is_active BOOLEAN,
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);

COPY staging_words (id, word, gender, plural, word_type, hint, category, cefr_level, image_query, audio_query, is_active, created_at, updated_at)
FROM '/docker/wortliste.csv'
WITH (FORMAT csv, DELIMITER ';', HEADER true, ENCODING 'UTF8');

INSERT INTO genders (name)
SELECT DISTINCT gender
FROM staging_words
WHERE gender IS NOT NULL AND gender <> '';

INSERT INTO categories (name)
SELECT DISTINCT category
FROM staging_words
WHERE category IS NOT NULL AND category <> '';

INSERT INTO word_types (name)
SELECT DISTINCT word_type
FROM staging_words
WHERE word_type IS NOT NULL AND word_type <> '';

INSERT INTO words (
    word, gender_id, plural, notes, category_id, type_id, image_url, audio_url, is_active, created_at, updated_at, cefr_level
)
SELECT
    sw.word,
    g.id,
    sw.plural,
    sw.hint,
    c.id,
    wt.id,
    sw.image_query,
    sw.audio_query,
    COALESCE(sw.is_active, TRUE),
    COALESCE(sw.created_at, NOW()),
    COALESCE(sw.updated_at, NOW()),
    sw.cefr_level
FROM staging_words sw
LEFT JOIN genders g ON g.name = sw.gender
LEFT JOIN categories c ON c.name = sw.category
LEFT JOIN word_types wt ON wt.name = sw.word_type;

CREATE OR REPLACE FUNCTION set_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_set_updated_at
BEFORE UPDATE ON words
FOR EACH ROW
EXECUTE FUNCTION set_updated_at();

CREATE OR REPLACE FUNCTION update_words_amount_on_insert()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.category_id IS NOT NULL THEN
        UPDATE categories SET words_amount = words_amount + 1 WHERE id = NEW.category_id;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION update_words_amount_on_delete()
RETURNS TRIGGER AS $$
BEGIN
    IF OLD.category_id IS NOT NULL THEN
        UPDATE categories SET words_amount = words_amount - 1 WHERE id = OLD.category_id;
    END IF;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION update_words_amount_on_update()
RETURNS TRIGGER AS $$
BEGIN
    IF OLD.category_id IS DISTINCT FROM NEW.category_id THEN
        IF OLD.category_id IS NOT NULL THEN
            UPDATE categories SET words_amount = words_amount - 1 WHERE id = OLD.category_id;
        END IF;
        IF NEW.category_id IS NOT NULL THEN
            UPDATE categories SET words_amount = words_amount + 1 WHERE id = NEW.category_id;
        END IF;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_words_insert
AFTER INSERT ON words
FOR EACH ROW EXECUTE FUNCTION update_words_amount_on_insert();

CREATE TRIGGER trigger_words_delete
AFTER DELETE ON words
FOR EACH ROW EXECUTE FUNCTION update_words_amount_on_delete();

CREATE TRIGGER trigger_words_update
AFTER UPDATE ON words
FOR EACH ROW EXECUTE FUNCTION update_words_amount_on_update();

CREATE INDEX idx_words_word ON words (word);
CREATE INDEX idx_words_plural ON words (plural);
CREATE INDEX idx_words_gender_id ON words (gender_id);
CREATE INDEX idx_words_category_id ON words (category_id);
CREATE INDEX idx_words_type_id ON words (type_id);
CREATE INDEX idx_words_active ON words (is_active) WHERE is_active = TRUE;
